/**
 * alertmanager
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PaginationSchema from '../model/PaginationSchema';
import PolicyChannelSchema from '../model/PolicyChannelSchema';

/**
* Channels service.
* @module api/ChannelsApi
* @version 1.0.0
*/
export default class ChannelsApi {

    /**
    * Constructs a new ChannelsApi. 
    * @alias module:api/ChannelsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deletePolicyChannelsDelete operation.
     * @callback module:api/ChannelsApi~deletePolicyChannelsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyChannelSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/ChannelsApi~deletePolicyChannelsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyChannelSchema}
     */
    deletePolicyChannelsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePolicyChannelsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyChannelSchema;
      return this.apiClient.callApi(
        '/channels/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPolicyChannelsGet operation.
     * @callback module:api/ChannelsApi~getPolicyChannelsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyChannelSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/ChannelsApi~getPolicyChannelsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyChannelSchema}
     */
    getPolicyChannelsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPolicyChannelsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyChannelSchema;
      return this.apiClient.callApi(
        '/channels/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPolicyChannelsGetAll operation.
     * @callback module:api/ChannelsApi~getPolicyChannelsGetAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginationSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ChannelsApi~getPolicyChannelsGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginationSchema}
     */
    getPolicyChannelsGetAll(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginationSchema;
      return this.apiClient.callApi(
        '/channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPolicyChannelsPost operation.
     * @callback module:api/ChannelsApi~postPolicyChannelsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyChannelSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/PolicyChannelSchema} [requestBody] 
     * @param {module:api/ChannelsApi~postPolicyChannelsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyChannelSchema}
     */
    postPolicyChannelsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyChannelSchema;
      return this.apiClient.callApi(
        '/channels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPolicyChannelsTest operation.
     * @callback module:api/ChannelsApi~postPolicyChannelsTestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyChannelSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/PolicyChannelSchema} [requestBody] 
     * @param {module:api/ChannelsApi~postPolicyChannelsTestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyChannelSchema}
     */
    postPolicyChannelsTest(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyChannelSchema;
      return this.apiClient.callApi(
        '/channels/test', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPolicyChannelsPut operation.
     * @callback module:api/ChannelsApi~putPolicyChannelsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyChannelSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/PolicyChannelSchema} [requestBody] 
     * @param {module:api/ChannelsApi~putPolicyChannelsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyChannelSchema}
     */
    putPolicyChannelsPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putPolicyChannelsPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyChannelSchema;
      return this.apiClient.callApi(
        '/channels/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
