/**
 * alertmanager
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PaginationSchema from '../model/PaginationSchema';
import PolicySchema from '../model/PolicySchema';

/**
* Policies service.
* @module api/PoliciesApi
* @version 1.0.0
*/
export default class PoliciesApi {

    /**
    * Constructs a new PoliciesApi. 
    * @alias module:api/PoliciesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deletePoliciesDelete operation.
     * @callback module:api/PoliciesApi~deletePoliciesDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicySchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/PoliciesApi~deletePoliciesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicySchema}
     */
    deletePoliciesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePoliciesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicySchema;
      return this.apiClient.callApi(
        '/policies/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPoliciesGet operation.
     * @callback module:api/PoliciesApi~getPoliciesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicySchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/PoliciesApi~getPoliciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicySchema}
     */
    getPoliciesGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPoliciesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicySchema;
      return this.apiClient.callApi(
        '/policies/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPoliciesGetAll operation.
     * @callback module:api/PoliciesApi~getPoliciesGetAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginationSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/PoliciesApi~getPoliciesGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginationSchema}
     */
    getPoliciesGetAll(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginationSchema;
      return this.apiClient.callApi(
        '/policies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPoliciesPost operation.
     * @callback module:api/PoliciesApi~postPoliciesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicySchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/PolicySchema} [requestBody] 
     * @param {module:api/PoliciesApi~postPoliciesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicySchema}
     */
    postPoliciesPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicySchema;
      return this.apiClient.callApi(
        '/policies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPoliciesPut operation.
     * @callback module:api/PoliciesApi~putPoliciesPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicySchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/PolicySchema} [requestBody] 
     * @param {module:api/PoliciesApi~putPoliciesPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicySchema}
     */
    putPoliciesPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putPoliciesPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicySchema;
      return this.apiClient.callApi(
        '/policies/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
