/**
 * alertmanager
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EventSchema from '../model/EventSchema';
import PaginationSchema from '../model/PaginationSchema';

/**
* Events service.
* @module api/EventsApi
* @version 1.0.0
*/
export default class EventsApi {

    /**
    * Constructs a new EventsApi. 
    * @alias module:api/EventsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getEventsGet operation.
     * @callback module:api/EventsApi~getEventsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/EventsApi~getEventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSchema}
     */
    getEventsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEventsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventSchema;
      return this.apiClient.callApi(
        '/events/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventsGetAll operation.
     * @callback module:api/EventsApi~getEventsGetAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginationSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/EventsApi~getEventsGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginationSchema}
     */
    getEventsGetAll(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginationSchema;
      return this.apiClient.callApi(
        '/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventsParametersGet operation.
     * @callback module:api/EventsApi~getEventsParametersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EventSchema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/EventsApi~getEventsParametersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EventSchema>}
     */
    getEventsParametersGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EventSchema];
      return this.apiClient.callApi(
        '/events/parameters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postEventsPost operation.
     * @callback module:api/EventsApi~postEventsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/EventSchema} [requestBody] 
     * @param {module:api/EventsApi~postEventsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSchema}
     */
    postEventsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventSchema;
      return this.apiClient.callApi(
        '/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
