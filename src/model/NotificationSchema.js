/**
 * alertmanager
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NotificationSchema model module.
 * @module model/NotificationSchema
 * @version 1.0.0
 */
class NotificationSchema {
    /**
     * Constructs a new <code>NotificationSchema</code>.
     * @alias module:model/NotificationSchema
     * @param clientUuid {String} Notification Client UUID
     * @param id {String} Id
     * @param status {module:model/NotificationSchema.StatusEnum} Notification status
     */
    constructor(clientUuid, id, status) { 
        
        NotificationSchema.initialize(this, clientUuid, id, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, clientUuid, id, status) { 
        obj['client_uuid'] = clientUuid;
        obj['id'] = id;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>NotificationSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotificationSchema} obj Optional instance to populate.
     * @return {module:model/NotificationSchema} The populated <code>NotificationSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotificationSchema();

            if (data.hasOwnProperty('client_uuid')) {
                obj['client_uuid'] = ApiClient.convertToType(data['client_uuid'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], ['String']);
            }
            if (data.hasOwnProperty('first_event')) {
                obj['first_event'] = ApiClient.convertToType(data['first_event'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('retries')) {
                obj['retries'] = ApiClient.convertToType(data['retries'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotificationSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotificationSchema</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NotificationSchema.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['client_uuid'] && !(typeof data['client_uuid'] === 'string' || data['client_uuid'] instanceof String)) {
            throw new Error("Expected the field `client_uuid` to be a primitive type in the JSON string but got " + data['client_uuid']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['events'])) {
            throw new Error("Expected the field `events` to be an array in the JSON data but got " + data['events']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

NotificationSchema.RequiredProperties = ["client_uuid", "id", "status"];

/**
 * Notification Client UUID
 * @member {String} client_uuid
 */
NotificationSchema.prototype['client_uuid'] = undefined;

/**
 * @member {Date} created_at
 */
NotificationSchema.prototype['created_at'] = undefined;

/**
 * List of notification events
 * @member {Array.<String>} events
 */
NotificationSchema.prototype['events'] = undefined;

/**
 * @member {Date} first_event
 */
NotificationSchema.prototype['first_event'] = undefined;

/**
 * Id
 * @member {String} id
 */
NotificationSchema.prototype['id'] = undefined;

/**
 * Quantity notification retries
 * @member {Number} retries
 */
NotificationSchema.prototype['retries'] = undefined;

/**
 * Notification status
 * @member {module:model/NotificationSchema.StatusEnum} status
 */
NotificationSchema.prototype['status'] = undefined;

/**
 * @member {Date} updated_at
 */
NotificationSchema.prototype['updated_at'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
NotificationSchema['StatusEnum'] = {

    /**
     * value: "Queued"
     * @const
     */
    "Queued": "Queued",

    /**
     * value: "Processing"
     * @const
     */
    "Processing": "Processing",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Success"
     * @const
     */
    "Success": "Success"
};



export default NotificationSchema;

